
optiboot_atmega168p_UART__8000000L.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fec  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ec  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffe  00003ffe  00000280  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000012  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000657  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000002c3  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000008ad  00000000  00000000  00000bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  0000009c  00000000  00000000  0000148c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000210  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0000038d  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000080  00000000  00000000  00001ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00003e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    3e00:	01 c0       	rjmp	.+2      	; 0x3e04 <main>
    3e02:	e4 c0       	rjmp	.+456    	; 0x3fcc <do_spm>

00003e04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    3e04:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8515__) || defined(__AVR_ATmega8535__) ||	\
    defined(__AVR_ATmega16__)   || defined(__AVR_ATmega162__) ||	\
    defined (__AVR_ATmega128__)
  ch = MCUCSR;
#else
  ch = MCUSR;
    3e06:	84 b7       	in	r24, 0x34	; 52
#endif
  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    3e08:	88 23       	and	r24, r24
    3e0a:	61 f0       	breq	.+24     	; 0x3e24 <main+0x20>
       *  2. we clear WDRF if it's set with EXTRF to avoid loops
       * One problematic scenario: broken application code sets watchdog timer 
       * without clearing MCUSR before and triggers it quickly. But it's
       * recoverable by power-on with pushed reset button.
       */
      if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) { 
    3e0c:	98 2f       	mov	r25, r24
    3e0e:	9a 70       	andi	r25, 0x0A	; 10
    3e10:	92 30       	cpi	r25, 0x02	; 2
    3e12:	41 f0       	breq	.+16     	; 0x3e24 <main+0x20>
	  if (ch & _BV(EXTRF)) {
    3e14:	81 ff       	sbrs	r24, 1
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <main+0x18>
    defined(__AVR_ATmega16__)   || defined(__AVR_ATmega162__) ||	\
    defined(__AVR_ATmega128__)
               // Fix missing definitions in avr-libc
	      MCUCSR = ~(_BV(WDRF));
#else
	      MCUSR = ~(_BV(WDRF));
    3e18:	97 ef       	ldi	r25, 0xF7	; 247
    3e1a:	94 bf       	out	0x34, r25	; 52
	  /* 
	   * save the reset flags in the designated register
	   * This can be saved in a main program by putting code in .init0 (which
	   * executes before normal c init code) to save R2 to a global variable.
	   */
	  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (ch));
    3e1c:	28 2e       	mov	r2, r24

	  // switch off watchdog
	  watchdogConfig(WATCHDOG_OFF);
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	c0 d0       	rcall	.+384    	; 0x3fa2 <watchdogConfig>
	  // Note that appstart_vec is defined so that this works with either
	  // real or virtual boot partitions.
	   __asm__ __volatile__ (
    3e22:	ee c0       	rjmp	.+476    	; 0x4000 <optiboot_version+0x2>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer. 
#elif defined(__AVR_ATtiny43__)
  #error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3e24:	85 e0       	ldi	r24, 0x05	; 5
    3e26:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0); 
  LINDAT=0;
    #else
      #if (SINGLESPEED == 0)
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    3e2a:	82 e0       	ldi	r24, 0x02	; 2
    3e2c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      #endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    3e30:	88 e1       	ldi	r24, 0x18	; 24
    3e32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    3e36:	86 e0       	ldi	r24, 0x06	; 6
    3e38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UART_SRL = (uint8_t)BAUD_SETTING;
    3e3c:	88 e0       	ldi	r24, 0x08	; 8
    3e3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
#ifdef RADIO_UART
  radio_init();
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
    3e42:	8e e0       	ldi	r24, 0x0E	; 14
    3e44:	ae d0       	rcall	.+348    	; 0x3fa2 <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    3e46:	25 9a       	sbi	0x04, 5	; 4
    3e48:	86 e0       	ldi	r24, 0x06	; 6
    	TIFR = _BV(TOV1);
    	while(!(TIFR & _BV(TOV1)));
	#elif defined(__AVR_ATtiny43__)
  		#error "LED flash for Tiny43 not yet supported"
	#else
  		TCNT1 = -(F_CPU/(1024*16));
    3e4a:	28 e1       	ldi	r18, 0x18	; 24
    3e4c:	3e ef       	ldi	r19, 0xFE	; 254
    	TIFR1 = _BV(TOV1);
    3e4e:	91 e0       	ldi	r25, 0x01	; 1
  		TCNT1 = -(F_CPU/(1024*16));
    3e50:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    3e54:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    	TIFR1 = _BV(TOV1);
    3e58:	96 bb       	out	0x16, r25	; 22
    	while(!(TIFR1 & _BV(TOV1)));
    3e5a:	b0 9b       	sbis	0x16, 0	; 22
    3e5c:	fe cf       	rjmp	.-4      	; 0x3e5a <main+0x56>
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||	\
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||	\
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    3e5e:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3e60:	a8 95       	wdr
    if (UART_SRA & _BV(RXC0))
    3e62:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3e66:	47 fd       	sbrc	r20, 7
    3e68:	02 c0       	rjmp	.+4      	; 0x3e6e <main+0x6a>
  } while (--count);
    3e6a:	81 50       	subi	r24, 0x01	; 1
    3e6c:	89 f7       	brne	.-30     	; 0x3e50 <main+0x4c>
	     * and we needed the space back.
	     */
#ifdef FOURPAGEERASE
	    if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
	    __boot_page_erase_short(address.word);
    3e6e:	23 e0       	ldi	r18, 0x03	; 3
    3e70:	e2 2e       	mov	r14, r18

	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    3e72:	dd 24       	eor	r13, r13
    3e74:	d3 94       	inc	r13
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short(address.word);
    3e76:	35 e0       	ldi	r19, 0x05	; 5
    3e78:	c3 2e       	mov	r12, r19
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    __boot_rww_enable_short();
    3e7a:	41 e1       	ldi	r20, 0x11	; 17
    ch = getch();
    3e7c:	b4 2e       	mov	r11, r20
    if(ch == STK_GET_PARAMETER) {
    3e7e:	85 d0       	rcall	.+266    	; 0x3f8a <getch>
      unsigned char which = getch();
    3e80:	81 34       	cpi	r24, 0x41	; 65
    3e82:	71 f4       	brne	.+28     	; 0x3ea0 <main+0x9c>
    3e84:	82 d0       	rcall	.+260    	; 0x3f8a <getch>
      verifySpace();
    3e86:	18 2f       	mov	r17, r24
    3e88:	92 d0       	rcall	.+292    	; 0x3fae <verifySpace>
	  putch(optiboot_version & 0xFF);
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
      if (which == STK_SW_MINOR) {
    3e8c:	12 38       	cpi	r17, 0x82	; 130
	  putch(optiboot_version >> 8);
    3e8e:	21 f0       	breq	.+8      	; 0x3e98 <main+0x94>
      } else if (which == STK_SW_MAJOR) {
    3e90:	88 e0       	ldi	r24, 0x08	; 8
	putch(0x03);
    3e92:	11 38       	cpi	r17, 0x81	; 129
    3e94:	09 f0       	breq	.+2      	; 0x3e98 <main+0x94>
    3e96:	83 e0       	ldi	r24, 0x03	; 3
    putch(STK_OK);
    3e98:	71 d0       	rcall	.+226    	; 0x3f7c <putch>
    3e9a:	80 e1       	ldi	r24, 0x10	; 16
    ch = getch();
    3e9c:	6f d0       	rcall	.+222    	; 0x3f7c <putch>
    else if(ch == STK_SET_DEVICE) {
    3e9e:	ef cf       	rjmp	.-34     	; 0x3e7e <main+0x7a>
    3ea0:	82 34       	cpi	r24, 0x42	; 66
      getNch(20);
    3ea2:	19 f4       	brne	.+6      	; 0x3eaa <main+0xa6>
      getNch(5);
    3ea4:	84 e1       	ldi	r24, 0x14	; 20
    3ea6:	8b d0       	rcall	.+278    	; 0x3fbe <getNch>
    else if(ch == STK_SET_DEVICE_EXT) {
    3ea8:	f8 cf       	rjmp	.-16     	; 0x3e9a <main+0x96>
      getNch(5);
    3eaa:	85 34       	cpi	r24, 0x45	; 69
    3eac:	11 f4       	brne	.+4      	; 0x3eb2 <main+0xae>
    else if(ch == STK_LOAD_ADDRESS) {
    3eae:	85 e0       	ldi	r24, 0x05	; 5
      address.bytes[0] = getch();
    3eb0:	fa cf       	rjmp	.-12     	; 0x3ea6 <main+0xa2>
    3eb2:	85 35       	cpi	r24, 0x55	; 85
    3eb4:	41 f4       	brne	.+16     	; 0x3ec6 <main+0xc2>
      address.bytes[1] = getch();
    3eb6:	69 d0       	rcall	.+210    	; 0x3f8a <getch>
    3eb8:	c8 2f       	mov	r28, r24
      address.word *= 2; // Convert from word address to byte address
    3eba:	67 d0       	rcall	.+206    	; 0x3f8a <getch>
    3ebc:	d8 2f       	mov	r29, r24
      verifySpace();
    3ebe:	cc 0f       	add	r28, r28
    3ec0:	dd 1f       	adc	r29, r29
    else if(ch == STK_UNIVERSAL) {
    3ec2:	75 d0       	rcall	.+234    	; 0x3fae <verifySpace>
      getNch(4);
    3ec4:	ea cf       	rjmp	.-44     	; 0x3e9a <main+0x96>
    3ec6:	86 35       	cpi	r24, 0x56	; 86
    3ec8:	21 f4       	brne	.+8      	; 0x3ed2 <main+0xce>
      putch(0x00);
    3eca:	84 e0       	ldi	r24, 0x04	; 4
    3ecc:	78 d0       	rcall	.+240    	; 0x3fbe <getNch>
    else if(ch == STK_PROG_PAGE) {
    3ece:	80 e0       	ldi	r24, 0x00	; 0
    3ed0:	e3 cf       	rjmp	.-58     	; 0x3e98 <main+0x94>
    3ed2:	84 36       	cpi	r24, 0x64	; 100
      GETLENGTH(length);
    3ed4:	09 f0       	breq	.+2      	; 0x3ed8 <main+0xd4>
    3ed6:	33 c0       	rjmp	.+102    	; 0x3f3e <main+0x13a>
    3ed8:	58 d0       	rcall	.+176    	; 0x3f8a <getch>
    3eda:	57 d0       	rcall	.+174    	; 0x3f8a <getch>
      desttype = getch();
    3edc:	18 2f       	mov	r17, r24
    3ede:	55 d0       	rcall	.+170    	; 0x3f8a <getch>
      bufPtr = buff.bptr;
    3ee0:	08 2f       	mov	r16, r24
    3ee2:	61 2c       	mov	r6, r1
    3ee4:	77 24       	eor	r7, r7
      do *bufPtr++ = getch();
    3ee6:	73 94       	inc	r7
    3ee8:	43 01       	movw	r8, r6
    3eea:	8f ef       	ldi	r24, 0xFF	; 255
    3eec:	68 1a       	sub	r6, r24
    3eee:	78 0a       	sbc	r7, r24
    3ef0:	4c d0       	rcall	.+152    	; 0x3f8a <getch>
    3ef2:	f4 01       	movw	r30, r8
    3ef4:	80 83       	st	Z, r24
      while (--length);
    3ef6:	16 11       	cpse	r17, r6
    3ef8:	f7 cf       	rjmp	.-18     	; 0x3ee8 <main+0xe4>
      verifySpace();
    3efa:	59 d0       	rcall	.+178    	; 0x3fae <verifySpace>
    3efc:	05 34       	cpi	r16, 0x45	; 69
    switch (memtype) {
    3efe:	09 f4       	brne	.+2      	; 0x3f02 <main+0xfe>
    3f00:	ff cf       	rjmp	.-2      	; 0x3f00 <main+0xfc>
	while (1)
    3f02:	fe 01       	movw	r30, r28
	    __boot_page_erase_short(address.word);
    3f04:	e7 be       	out	0x37, r14	; 55
    3f06:	e8 95       	spm
    3f08:	07 b6       	in	r0, 0x37	; 55
	    boot_spm_busy_wait();
    3f0a:	00 fc       	sbrc	r0, 0
    3f0c:	fd cf       	rjmp	.-6      	; 0x3f08 <main+0x104>
    3f0e:	fe 01       	movw	r30, r28
	    uint16_t addrPtr = address.word;
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	31 e0       	ldi	r19, 0x01	; 1
    3f14:	d9 01       	movw	r26, r18
		__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    3f16:	2e 5f       	subi	r18, 0xFE	; 254
    3f18:	3f 4f       	sbci	r19, 0xFF	; 255
    3f1a:	8d 91       	ld	r24, X+
    3f1c:	9c 91       	ld	r25, X
    3f1e:	0c 01       	movw	r0, r24
    3f20:	d7 be       	out	0x37, r13	; 55
    3f22:	e8 95       	spm
	    } while (len -= 2);
    3f24:	11 24       	eor	r1, r1
	    __boot_page_write_short(address.word);
    3f26:	32 96       	adiw	r30, 0x02	; 2
    3f28:	12 13       	cpse	r17, r18
    3f2a:	f4 cf       	rjmp	.-24     	; 0x3f14 <main+0x110>
	    boot_spm_busy_wait();
    3f2c:	fe 01       	movw	r30, r28
    3f2e:	c7 be       	out	0x37, r12	; 55
	    __boot_rww_enable_short();
    3f30:	e8 95       	spm
    3f32:	07 b6       	in	r0, 0x37	; 55
#endif
	} // default block
	break;
    3f34:	00 fc       	sbrc	r0, 0
    else if(ch == STK_READ_PAGE) {
    3f36:	fd cf       	rjmp	.-6      	; 0x3f32 <main+0x12e>
      GETLENGTH(length);
    3f38:	b7 be       	out	0x37, r11	; 55
    3f3a:	e8 95       	spm
    3f3c:	ae cf       	rjmp	.-164    	; 0x3e9a <main+0x96>
      desttype = getch();
    3f3e:	84 37       	cpi	r24, 0x74	; 116
    3f40:	71 f4       	brne	.+28     	; 0x3f5e <main+0x15a>
      verifySpace();
    3f42:	23 d0       	rcall	.+70     	; 0x3f8a <getch>
    3f44:	22 d0       	rcall	.+68     	; 0x3f8a <getch>
      read_mem(desttype, address, length);
    3f46:	f8 2e       	mov	r15, r24
	    //      while (--length);
	    // read a Flash and increment the address (may increment RAMPZ)
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    3f48:	20 d0       	rcall	.+64     	; 0x3f8a <getch>
    3f4a:	31 d0       	rcall	.+98     	; 0x3fae <verifySpace>
#endif
	    putch(ch);
    3f4c:	8e 01       	movw	r16, r28
    3f4e:	f8 01       	movw	r30, r16
	} while (--length);
    3f50:	85 91       	lpm	r24, Z+
    3f52:	8f 01       	movw	r16, r30
    3f54:	13 d0       	rcall	.+38     	; 0x3f7c <putch>
    3f56:	fa 94       	dec	r15
    else if(ch == STK_READ_SIGN) {
    3f58:	f1 10       	cpse	r15, r1
    3f5a:	f9 cf       	rjmp	.-14     	; 0x3f4e <main+0x14a>
      verifySpace();
    3f5c:	9e cf       	rjmp	.-196    	; 0x3e9a <main+0x96>
    3f5e:	85 37       	cpi	r24, 0x75	; 117
      putch(SIGNATURE_0);
    3f60:	39 f4       	brne	.+14     	; 0x3f70 <main+0x16c>
    3f62:	25 d0       	rcall	.+74     	; 0x3fae <verifySpace>
    3f64:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_1);
    3f66:	0a d0       	rcall	.+20     	; 0x3f7c <putch>
    3f68:	84 e9       	ldi	r24, 0x94	; 148
    3f6a:	08 d0       	rcall	.+16     	; 0x3f7c <putch>
      putch(SIGNATURE_2);
    3f6c:	8b e0       	ldi	r24, 0x0B	; 11
    3f6e:	94 cf       	rjmp	.-216    	; 0x3e98 <main+0x94>
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    3f70:	81 35       	cpi	r24, 0x51	; 81
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <main+0x172>
    3f74:	a6 cf       	rjmp	.-180    	; 0x3ec2 <main+0xbe>
      watchdogConfig(WATCHDOG_16MS);
    3f76:	88 e0       	ldi	r24, 0x08	; 8
    3f78:	14 d0       	rcall	.+40     	; 0x3fa2 <watchdogConfig>
    3f7a:	a3 cf       	rjmp	.-186    	; 0x3ec2 <main+0xbe>

00003f7c <putch>:
      verifySpace();
    3f7c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    3f80:	95 ff       	sbrs	r25, 5
    3f82:	fc cf       	rjmp	.-8      	; 0x3f7c <putch>
  UART_UDR = ch;
    3f84:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    3f88:	08 95       	ret

00003f8a <getch>:
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    3f8a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3f8e:	87 ff       	sbrs	r24, 7
    3f90:	fc cf       	rjmp	.-8      	; 0x3f8a <getch>
  if (!(UART_SRA & _BV(FE0))) {
    3f92:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    3f96:	84 fd       	sbrc	r24, 4
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <getch+0x12>
  __asm__ __volatile__ (
    3f9a:	a8 95       	wdr
  ch = UART_UDR;
    3f9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
    3fa0:	08 95       	ret

00003fa2 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fa2:	e0 e6       	ldi	r30, 0x60	; 96
    3fa4:	f0 e0       	ldi	r31, 0x00	; 0
    3fa6:	98 e1       	ldi	r25, 0x18	; 24
    3fa8:	90 83       	st	Z, r25
  WDTCSR = x;
    3faa:	80 83       	st	Z, r24
}
    3fac:	08 95       	ret

00003fae <verifySpace>:
  if (getch() != CRC_EOP) {
    3fae:	ed df       	rcall	.-38     	; 0x3f8a <getch>
    3fb0:	80 32       	cpi	r24, 0x20	; 32
    3fb2:	19 f0       	breq	.+6      	; 0x3fba <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fb4:	88 e0       	ldi	r24, 0x08	; 8
    3fb6:	f5 df       	rcall	.-22     	; 0x3fa2 <watchdogConfig>
  putch(STK_INSYNC);
    3fb8:	ff cf       	rjmp	.-2      	; 0x3fb8 <verifySpace+0xa>
    3fba:	84 e1       	ldi	r24, 0x14	; 20
void getNch(uint8_t count) {
    3fbc:	df cf       	rjmp	.-66     	; 0x3f7c <putch>

00003fbe <getNch>:
    3fbe:	cf 93       	push	r28
  do getch(); while (--count);
    3fc0:	c8 2f       	mov	r28, r24
    3fc2:	e3 df       	rcall	.-58     	; 0x3f8a <getch>
    3fc4:	c1 50       	subi	r28, 0x01	; 1
}
    3fc6:	e9 f7       	brne	.-6      	; 0x3fc2 <getNch+0x4>
  verifySpace();
    3fc8:	cf 91       	pop	r28
    3fca:	f1 cf       	rjmp	.-30     	; 0x3fae <verifySpace>

00003fcc <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    3fcc:	fc 01       	movw	r30, r24
    3fce:	0a 01       	movw	r0, r20
    3fd0:	67 bf       	out	0x37, r22	; 55
    3fd2:	e8 95       	spm
    3fd4:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    3fd6:	07 b6       	in	r0, 0x37	; 55
    3fd8:	00 fc       	sbrc	r0, 0
    3fda:	fd cf       	rjmp	.-6      	; 0x3fd6 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    3fdc:	66 70       	andi	r22, 0x06	; 6
    3fde:	29 f0       	breq	.+10     	; 0x3fea <do_spm+0x1e>
    3fe0:	45 2b       	or	r20, r21
    3fe2:	19 f4       	brne	.+6      	; 0x3fea <do_spm+0x1e>
      // Reenable read access to flash
      __boot_rww_enable_short();
    3fe4:	81 e1       	ldi	r24, 0x11	; 17
    3fe6:	87 bf       	out	0x37, r24	; 55
    3fe8:	e8 95       	spm
    }
#endif
}
    3fea:	08 95       	ret
